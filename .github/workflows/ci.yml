name: Go CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.txt
          retention-days: 14

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Build binary
        run: |
          go build -v -ldflags="-X github.com/Azure/mcp-kubernetes/pkg/version.GitCommit=$(git rev-parse HEAD) -X github.com/Azure/mcp-kubernetes/pkg/version.BuildMetadata=$(date +%Y%m%d)" -o mcp-kubernetes ./cmd/mcp-kubernetes

      - name: Build Docker image
        run: docker build -t mcp-kubernetes:test --build-arg VERSION=$(git describe --tags --always --dirty | cut -c2-) --build-arg GIT_COMMIT=$(git rev-parse HEAD) --build-arg BUILD_DATE=$(date +%Y%m%d) --build-arg GIT_TREE_STATE=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi) .

      - name: Check Docker image
        run: |
          docker images mcp-kubernetes:test
          docker run --rm mcp-kubernetes:test --version || true

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Build Windows Docker image
        run: |
          docker build --platform windows/amd64 -f Dockerfile.windows -t mcp-kubernetes:windows-test `
            --build-arg VERSION="${{ github.sha }}" `
            --build-arg GIT_COMMIT="${{ github.sha }}" `
            --build-arg BUILD_DATE="${{ github.run_number }}" `
            --build-arg GIT_TREE_STATE="clean" .

      - name: Validate Windows Docker image
        run: |
          docker imagesmcp-kubernetes:windows-test
          docker run --rmmcp-kubernetes:windows-test --help || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...